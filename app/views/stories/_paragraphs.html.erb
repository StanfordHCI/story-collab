<div id="textModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">Ã—</button>
    <h3 id="myModalLabel">All the text that's fit to copy</h3>
  </div>
  <div class="modal-body">
    <p><textarea></textarea></p>
  </div>
  <div class="modal-footer">
    <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
  </div>
</div>
<script>

var selectedTextarea = "textarea";  // The currently selected textarea
var arbitraryId = <%= @story.new_record? ? 1 : @story.scenes.count %>;

//
// Helper Methods
//
function tick() {
  $('textarea').on('focus click', function() {
    selectedTextarea = this;
  });
  paragraphsToContent();
}

//
// Toolbar functions
//
$().ready(function() {
  $('#stoolbar_bold').click(function() {
    $(selectedTextarea).each(function() {
      var start = this.selectionStart;
      var end = this.selectionEnd;
      if (end - start > 0) {
        $(this).val(
          $(this).val().substring(0, start) + 
          "**" + $(this).val().substring(start, end) + "**" +
          $(this).val().substring(end)
        );      
        this.setSelectionRange(start, end + 4);        
      }
    });
    paragraphsToContent();
  });
  $('#stoolbar_italic').click(function() {
    $(selectedTextarea).each(function() {
      var start = this.selectionStart;
      var end = this.selectionEnd;
      if (end - start > 0) {
        $(this).val(
          $(this).val().substring(0, start) + 
          "_" + $(this).val().substring(start, end) + "_" +
          $(this).val().substring(end)
        );
        this.setSelectionRange(start, end + 2);        
      }
    });
    paragraphsToContent();
  });
  $('#stoolbar_selectall').click(function() {
    var texts = "";
    $('.txt').each(function() {
      texts += $(this).val() + "\n\n";
    });
    $('#textModal textarea').val(texts);
    $('#textModal').modal();
  })
});

//
// Paragraph <=> Content JSON Conversion
//
// TODO REFACTOR THIS TO BE DRY
function contentToParagraphs() {
  // Resize textareas
  $('.txt').each(function() {
    resizeNow(this);
    observeBox(this);
  });
  tick();
}
function paragraphsToContent() {
  // Update positions
  $('.edit-mode').children().each(function(i, v) {
    $(this).find('.scene-info-inner').attr('data-position', i + 1);
  });
  // Get content as JSON
  var newContent = [];
  $('.edit-mode').children().each(function() {
    $parabox = $(this).find('.txt');
    $scenebox = $(this).find('.scene-info-inner');
    var parauser = $parabox.attr("data-user");
    if (parauser == undefined) {
      parauser = "<%= current_user.id %>";
    }
    newContent.push({ 'id': $scenebox.attr('data-id'), 'position': $scenebox.attr('data-position'), 
      'content': $scenebox.val(), 'paragraphs': [ { 'id': $parabox.attr('data-id'), 'content': $parabox.val(), 'user_id': parauser } ] });
  });
  $('#story_content').val(JSON.stringify(newContent));
}
$().ready(function() {
  contentToParagraphs();
  $('.edit-mode').on('change', 'textarea', function() {
    paragraphsToContent();
  });
});

//
// Textarea Resizing - Thanks to http://stackoverflow.com/questions/454202/creating-a-textarea-with-auto-resize
//
var observe;
if (window.attachEvent) {
    observe = function (element, event, handler) {
        element.attachEvent('on'+event, handler);
    };
}
else {
    observe = function (element, event, handler) {
        element.addEventListener(event, handler, false);
    };
}

function resizeNow(text) {
  text.style.height = 'auto';
  text.style.height = text.scrollHeight+'px';
  console.log(text.scrollHeight);
}

function observeBox(boxElt) {
  var text = boxElt;
  function resize () {
    text.style.height = 'auto';
    text.style.height = text.scrollHeight+'px';
    console.log(text.scrollHeight);
  }
  /* 0-timeout to get the already changed text */
  function delayedResize () {
      window.setTimeout(resize, 0);
  }
  observe(text, 'change',  resize);
  observe(text, 'cut',     delayedResize);
  observe(text, 'paste',   delayedResize);
  observe(text, 'drop',    delayedResize);
  observe(text, 'keydown', delayedResize);
}

//
// Textarea Navigation
//
$().ready(function() {
  var prevSelectionStart = -1;
  $('.edit-mode').on('focus', '.txt', function() {
    prevSelectionStart = this.selectionStart;
  })
  $('.edit-mode').on('keyup', '.txt', function(e) {
    // console.log(this.selectionStart);

    // See if we want to jump to the next textarea
    if (this.selectionStart == prevSelectionStart || this.selectionStart == $(this).val().length) {
      $next = $(this).parent().parent().parent().next().find('.txt');
      if (e.keyCode == 40) { // Down arrow
        $next.focus();
      } else if (e.keyCode == 39 && this.selectionStart == $(this).val().length) { // Right arrow
        $next.focus();
      }
    }

    // See if we want to jump to the previous textarea
    if (this.selectionStart == prevSelectionStart || this.selectionStart == 0) {
      $prev = $(this).parent().parent().parent().prev().find('.txt');
      if (e.keyCode == 38) { // Up arrow
        $prev.focus();
      } else if (e.keyCode == 37) { // Left arrow
        $prev.focus();
        $prev[0].setSelectionRange($prev.val().length * 2, $prev.val().length * 2);
      } else if (e.keyCode == 8 && this.selectionStart == 0) {
        $prev.focus();
        if ($(this).val().length == 0 && $('.edit-mode .txt').length > 1) {
          $(this).parent().parent().parent().remove();
        }
      }
    }

    // Create a new textarea with a double return
    if($(this).val().indexOf("\n\n") !== -1) {
      var $para = $("<%= escape_javascript(render :partial => 'scenes/scene', :locals => { :scene => Scene.new, :edit_mode => true }) %>");
      $para.attr("id", "box_" + arbitraryId);
      arbitraryId++;
      $(this).parent().parent().parent().after($para);
      var prev = $(this).val().substring(0, $(this).val().indexOf("\n\n"));
      var next = $(this).val().substring($(this).val().indexOf("\n\n") + 2);
      $(this).val(prev);
      resizeNow(this);
      var $next = $(this).parent().parent().parent().next().find('.txt');
      observeBox($next[0]);
      $next.val(next).focus();
      resizeNow($next[0]);
    }
    prevSelectionStart = this.selectionStart;
    tick();
  });
});    
  
</script>
