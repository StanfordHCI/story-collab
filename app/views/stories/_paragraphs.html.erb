<div id="textModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">Ã—</button>
    <h3 id="myModalLabel">All the text that's fit to copy</h3>
  </div>
  <div class="modal-body">
    <p><textarea></textarea></p>
  </div>
  <div class="modal-footer">
    <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
  </div>
</div>
<script>

var selectedTextarea = "textarea";  // The currently selected textarea

//
// Helper Methods
//
function tick() {
  $('textarea').on('focus click', function() {
    selectedTextarea = this;
  });
  paragraphsToContent();
}

//
// Toolbar functions
//
$().ready(function() {
  $('#stoolbar_bold').click(function() {
    toolbarBold();
    paragraphsToContent();
  });
  $('#stoolbar_italic').click(function() {
    toolbarItalic();
    paragraphsToContent();
  });
  $('#stoolbar_ul').click(function() {
    toolbarUnorderedList();
    paragraphsToContent();
  });
  $('#stoolbar_selectall').click(function() {
    var texts = "";
    $('.txt').each(function() {
      texts += $(this).val() + "\n\n";
    });
    $('#textModal textarea').val(texts);
    $('#textModal').modal();
  })
});

//
// Paragraph <=> Content JSON Conversion
function contentToParagraphs() {
  $('.txt').autosize();
  tick();
}
function paragraphsToContent() {
  // Update positions
  $('.edit-mode').children(".scene").each(function(i, v) {
    $(this).attr('data-position', i + 1);
  });
  // Get content as JSON
  var newContent = [];
  $('.edit-mode').children(".scene").each(function() {
    $scenebox = $(this);
    $parabox = $(this).find('.txt');

    var paragraphsJSON = [];
    $parabox.each(function() {
      var parauser = $(this).attr("data-user");
      if (parauser == undefined) {
        parauser = "<%= current_user.id %>";
      }
      paragraphsJSON.push({'id': $(this).attr('data-id'), 'content': $(this).val(), 'user_id': parauser});
    });
    newContent.push({ 'id': $scenebox.attr('data-id'), 'position': $scenebox.attr('data-position'), 
                      'content': $scenebox.children(".scene-form").children("form").children("#scene_content").val(), 
                      'title': $scenebox.children(".scene-form").children("form").children("#scene_title").val(),
                      'prompt': $(".scene-form form #scene_prompt", $scenebox).val(),
                      'paragraphs': paragraphsJSON });
  });
  $('#story_content').val(JSON.stringify(newContent));
}
$().ready(function() {
  contentToParagraphs();
  $('.edit-mode').on('change', 'textarea, input[type=text]', function() {
    console.log("change");
    paragraphsToContent();
  });
});

//
// Textarea Navigation
//
$().ready(function() {
  var prevSelectionStart = -1;
  $('.edit-mode').on('focus', '.txt', function() {
    prevSelectionStart = this.selectionStart;
  })
  $('.edit-mode').on('keydown', '.txt', function(e) {
    // See if we want to jump to the next textarea
    if (this.selectionStart == prevSelectionStart || this.selectionStart == $(this).val().length) {
      $next = $(this).parents(".scene").next().find('.txt');
      if (e.keyCode == 40) { // Down arrow
        $next.focus();
      } else if (e.keyCode == 39 && this.selectionStart == $(this).val().length) { // Right arrow
        $next.focus();
      }
    }

    // See if we want to jump to the previous textarea
    if (this.selectionStart == prevSelectionStart || this.selectionStart == 0) {
      $prev = $(this).parents(".scene").prev().find('.txt');
      if (e.keyCode == 38) { // Up arrow
        $prev.focus();
      } else if (e.keyCode == 37 && this.selectionStart == 0) { // Left arrow
        $prev.focus();
        $prev[0].setSelectionRange($prev.val().length * 2, $prev.val().length * 2);
      } else if (e.keyCode == 8 && this.selectionStart == 0) { // Backspace - delete or merge depending
        if ($(this).val().length == 0 && $('.edit-mode .txt').length > 1) {
          $(this).parents(".scene").remove();
        } else if ($(this).parents(".scene").find('a[class~=new-scene]').length > 0) {
          $prev.val($prev.val() + $(this).val());
          $(this).parents(".scene").remove();
          tick();
        }
        $prev.focus();
        $('.paragraph .txt').trigger('autosize');
      }
    }
  });

  $('.edit-mode').on('keyup', '.txt', function(e) { 
    // Create a new textarea with a double return
    if($(this).val().indexOf("\n\n") !== -1) {
      <% temp = Scene.new %>
      var $para = $("<%= escape_javascript(render :partial => 'scenes/scene', :locals => { :scene => temp, :edit_mode => true }) %>");
      $para.attr("id", "temp_<%= temp.temp_id %>");
      $(this).parents(".scene").after($para);
      var prev = $(this).val().substring(0, $(this).val().indexOf("\n\n"));
      var next = $(this).val().substring($(this).val().indexOf("\n\n") + 2);
      $(this).val(prev);
      var $next = $(this).parents(".scene").next().find('.txt');
      $next.val(next).focus();
      $('.txt', $para).autosize();
      $('.paragraph .txt').trigger('autosize');
    }
    prevSelectionStart = this.selectionStart;
    tick();
  });
});    
  
</script>
