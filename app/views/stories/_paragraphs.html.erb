<div class="stoolbar row-fluid">
  <div class="span12">
    <div class="status pull-right">
      <%= draft_status(@story) %>
      <%= published_status(@story) %>
    </div>
    <ul>
      <li class="btn" id="stoolbar_bold">B</li>
      <li class="btn" id="stoolbar_italic">i</li>
      <li class="divider">&nbsp;</li>
      <li class="btn" id="stoolbar_selectall"><i class="icon-book"></i></li>
    </ul>
  </div>
</div>
<div class="stext"></div>

<div id="textModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">Ã—</button>
    <h3 id="myModalLabel">All the text that's fit to copy</h3>
  </div>
  <div class="modal-body">
    <p><textarea></textarea></p>
  </div>
  <div class="modal-footer">
    <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
  </div>
</div>
<script>

var selectedTextarea = "textarea";  // The currently selected textarea
var arbitraryId = 0;

//
// Helper Methods
//
function tick() {
  $('.ttab textarea').attr('placeholder', 'What\'s happening in this paragraph?');
  $('textarea').on('focus click', function() {
    selectedTextarea = this;
  });
  paragraphsToContent();
}

//
// Toolbar functions
//
$().ready(function() {
  $('#stoolbar_bold').click(function() {
    $(selectedTextarea).each(function() {
      var start = this.selectionStart;
      var end = this.selectionEnd;
      if (end - start > 0) {
        $(this).val(
          $(this).val().substring(0, start) + 
          "**" + $(this).val().substring(start, end) + "**" +
          $(this).val().substring(end)
        );      
        this.setSelectionRange(start, end + 4);        
      }
    });
    paragraphsToContent();
  });
  $('#stoolbar_italic').click(function() {
    $(selectedTextarea).each(function() {
      var start = this.selectionStart;
      var end = this.selectionEnd;
      if (end - start > 0) {
        $(this).val(
          $(this).val().substring(0, start) + 
          "_" + $(this).val().substring(start, end) + "_" +
          $(this).val().substring(end)
        );
        this.setSelectionRange(start, end + 2);        
      }
    });
    paragraphsToContent();
  });
  $('#stoolbar_selectall').click(function() {
    var texts = "";
    $('.txt').each(function() {
      texts += $(this).val() + "\n\n";
    });
    $('#textModal textarea').val(texts);
    $('#textModal').modal();
  })
});

//
// Paragraph <=> Content JSON Conversion
//
// TODO REFACTOR THIS TO BE DRY
function contentToParagraphs() {
  <% if @story.new_record? %>
  var $para = $("<div class=\"row-fluid\"><div class=\"span7 tbox\"><textarea class=\"txt\"></textarea></div><div class=\"span4 ttab\"><textarea /></div><div class=\"span1\"><span class=\"move\"><i class=\"icon-move\"></i></span></div></div>");
  $para.find('.ttab textarea').attr("data-position", 1); // Scene text
  $para.attr('id', 'box_' + arbitraryId++);
  $(".stext").append($para);
  // Resize textareas
  $('.txt').each(function() {
    resizeNow(this);
    observeBox(this);
  });
  $('.ttab textarea').each(function() {
    resizeNow(this);
    observeBox(this);
  });
  tick();
  <% else %>
  // Parse out content
  $.getJSON('<%= story_path(@story, :format => :json) %>', function(data) {
    $(data.scenes).each(function() {
      console.log(this.content);
      // TODO support multiple paragraphs
      var $para = $("<div class=\"row-fluid\"><div class=\"span7 tbox\"><textarea class=\"txt\"></textarea></div><div class=\"span4 ttab\"><textarea /></div><div class=\"span1\"><span class=\"move\"><i class=\"icon-move\"></i></span></div></div>");
      $para.find('.ttab textarea').attr("data-id", this.id).attr("data-position", this.position).val(this.content); // Scene text
      $para.find('.txt').attr("data-id", this.paragraphs[0].id).val(this.paragraphs[0].content); // Paragraph text
      $para.attr('id', 'box_' + arbitraryId++);
      $(".stext").append($para);
      // Resize textareas
      $('.txt').each(function() {
        resizeNow(this);
        observeBox(this);
      });
      $('.ttab textarea').each(function() {
        resizeNow(this);
        observeBox(this);
      });
      tick();
    });
  });
  <% end %>
}
function paragraphsToContent() {
  // Update positions
  $('.stext').children().each(function(i, v) {
    $(this).find('.ttab textarea').attr('data-position', i + 1);
  });
  // Get content as JSON
  var newContent = [];
  $('.stext').children().each(function() {
    $parabox = $(this).find('.txt');
    $scenebox = $(this).find('.ttab textarea');
    newContent.push({ 'id': $scenebox.attr('data-id'), 'position': $scenebox.attr('data-position'), 
      'content': $scenebox.val(), 'paragraphs': [ { 'id': $parabox.attr('data-id'), 'content': $parabox.val() } ] });
  });
  $('#story_content').val(JSON.stringify(newContent));
}
$().ready(function() {
  contentToParagraphs();
  $('.stext').on('change', 'textarea', function() {
    paragraphsToContent();
  });
});

//
// Textarea Resizing - Thanks to http://stackoverflow.com/questions/454202/creating-a-textarea-with-auto-resize
//
var observe;
if (window.attachEvent) {
    observe = function (element, event, handler) {
        element.attachEvent('on'+event, handler);
    };
}
else {
    observe = function (element, event, handler) {
        element.addEventListener(event, handler, false);
    };
}

function resizeNow(text) {
  text.style.height = 'auto';
  text.style.height = text.scrollHeight+'px';
  console.log(text.scrollHeight);
}

function observeBox(boxElt) {
  var text = boxElt;
  function resize () {
    text.style.height = 'auto';
    text.style.height = text.scrollHeight+'px';
    console.log(text.scrollHeight);
  }
  /* 0-timeout to get the already changed text */
  function delayedResize () {
      window.setTimeout(resize, 0);
  }
  observe(text, 'change',  resize);
  observe(text, 'cut',     delayedResize);
  observe(text, 'paste',   delayedResize);
  observe(text, 'drop',    delayedResize);
  observe(text, 'keydown', delayedResize);
}

//
// Textarea Navigation
//
$().ready(function() {
  var prevSelectionStart = -1;
  $('.stext').on('focus', '.txt', function() {
    prevSelectionStart = this.selectionStart;
  })
  $('.stext').on('keyup', '.txt', function(e) {
    // console.log(this.selectionStart);

    // See if we want to jump to the next textarea
    if (this.selectionStart == prevSelectionStart || this.selectionStart == $(this).val().length) {
      $next = $(this).parent().parent().next().find('.txt');
      if (e.keyCode == 40) { // Down arrow
        $next.focus();
      } else if (e.keyCode == 39 && this.selectionStart == $(this).val().length) { // Right arrow
        $next.focus();
      }
    }

    // See if we want to jump to the previous textarea
    if (this.selectionStart == prevSelectionStart || this.selectionStart == 0) {
      $prev = $(this).parent().parent().prev().find('.txt');
      if (e.keyCode == 38) { // Up arrow
        $prev.focus();
      } else if (e.keyCode == 37) { // Left arrow
        $prev.focus();
        $prev[0].setSelectionRange($prev.val().length * 2, $prev.val().length * 2);
      } else if (e.keyCode == 8 && this.selectionStart == 0) {
        $prev.focus();
        if ($(this).val().length == 0 && $('.stext .txt').length > 1) {
          $(this).parent().parent().remove();
        }
      }
    }

    // Create a new textarea with a double return
    if($(this).val().indexOf("\n\n") !== -1) {
      var $para = $("<div class=\"row-fluid\"><div class=\"span7 tbox\"><textarea class=\"txt\"></textarea></div><div class=\"span4 ttab\"><textarea /></div><div class=\"span1\"><span class=\"move\"><i class=\"icon-move\"></i></span></div></div>");
      $para.attr('id', 'box_' + arbitraryId++);
      $(this).parent().parent().after($para);
      var prev = $(this).val().substring(0, $(this).val().indexOf("\n\n"));
      var next = $(this).val().substring($(this).val().indexOf("\n\n") + 2);
      $(this).val(prev);
      resizeNow(this);
      var $next = $(this).parent().parent().next().find('.txt');
      observeBox($next[0]);
      $next.val(next).focus();
      resizeNow($next[0]);
    }
    prevSelectionStart = this.selectionStart;
    tick();
  });
});

//
// Draggable Paragraphs
//
$().ready(function() {
  $('.stext').sortable({
    handle: '.move',
    stop: function() {
      paragraphsToContent();
    }
  });
});
</script>